:- use_module(library(aleph)).
:- if(current_predicate(use_rendering/1)).
:- use_rendering(prolog).
:- endif.
:- aleph.
:-style_check(-discontiguous).

:- aleph_set(i,6).
:- aleph_set(clauselength,7).
:- aleph_set(nodes,50000).

%% :- modeh(*,f(+list,-element)). % PROBLEM SPECIFIC
:- modeb(*,head(+list,-element)).
:- modeb(*,tail(+list,-list)).
:- modeb(*,geq(+element,+element)).
:- modeb(*,empty(+list)).
:- modeb(*,even(+element)).
:- modeb(*,odd(+element)).
:- modeb(*,one(+element)).
:- modeb(*,zero(-element)).
:- modeb(*,decrement(+element,-element)).
%% :- modeb(*,increment(+element,-element)). % PROBLEM SPECIFIC
%% :- modeb(*,element(+list,-element)). % PROBLEM SPECIFIC
%% :- modeb(*,cons(+element,+list,-list)). % PROBLEM SPECIFIC
:- modeh(*,f(+list,-list)).
:- modeb(*,f(+list,-list)).
:- modeb(*,cons(+element,+list,-list)).

:- determination(f/2,head/2).
:- determination(f/2,tail/2).
:- determination(f/2,geq/2).
:- determination(f/2,empty/1).
:- determination(f/2,even/1).
:- determination(f/2,odd/1).
:- determination(f/2,one/1).
:- determination(f/2,zero/1).
:- determination(f/2,decrement/2).
:- determination(f/2,f/2).
%% :- determination(f/2,increment/2).
%% :- determination(f/2,element/2).
:- determination(f/2,cons/3).
:-begin_bg.
is_list([]).
is_list([_|_]).

increment(A,B):-
    (nonvar(A) -> \+ is_list(A); true),
    (nonvar(B) -> \+ is_list(B); true),
    succ(A,B).

decrement(A,B):-
    (nonvar(A) -> \+ is_list(A); true),
    (nonvar(B) -> \+ is_list(B); true),
    succ(B,A).

my_length(A,B):-
    (nonvar(A) -> is_list(A); true),
    (nonvar(B) -> \+is_list(B); true),
    length(A,B).

cons(A,B,C):-
    append([A],B,C).
comps([H|T],H,T).

tail([_|T],T).
head([H|_],H).
sum(A,B,C):-
    (nonvar(A) -> \+ is_list(A); true),
    (nonvar(B) -> \+ is_list(B); true),
    (nonvar(C) -> \+ is_list(B); true),
    C is A+B.
empty([]).

element([X|_],X):-!.
element([_|T],X):-
    element(T,X).

empty_in([]).
empty_out([]).

zero(0).
one(1).

gt(A,B):-
    nonvar(A),
    nonvar(B),
    \+is_list(A),
    \+is_list(B),
    A > B.

geq(A,B):-
    nonvar(A),
    nonvar(B),
    \+is_list(A),
    \+is_list(B),
    A >= B.

even(A):-
    nonvar(A),
    \+ is_list(A),
    0 is A mod 2.

odd(A):-
    nonvar(A),
    \+ is_list(A),
    1 is A mod 2.
:-end_bg.
:-begin_in_pos.
f([100, 33, 51, 59, 64, 33, 10, 84, 20, 53, 96, 47, 91, 87, 9, 80, 61, 80, 29, 75, 18],[100, 33, 51, 59, 64, 33, 10, 84, 20, 53, 96, 47, 91, 87, 9, 80, 61, 80, 29, 75]).
f([20, 98, 67, 67, 93, 98, 55],[20, 98, 67, 67, 93, 98]).
f([55, 77, 98, 89, 45, 50, 83, 39, 54, 50, 30, 19, 70, 39, 31, 24, 92, 99, 60, 1, 85, 70, 50, 73],[55, 77, 98, 89, 45, 50, 83, 39, 54, 50, 30, 19, 70, 39, 31, 24, 92, 99, 60, 1, 85, 70, 50]).
f([76, 23, 55, 94, 93, 51, 76, 46, 38, 63, 57, 42, 12, 97, 76, 98, 9, 99, 91, 43, 74, 3, 55, 15, 37, 75, 83, 10, 67, 95, 3, 7, 95, 77, 47, 86, 38, 44, 45, 10, 64, 24, 5, 90, 57],[76, 23, 55, 94, 93, 51, 76, 46, 38, 63, 57, 42, 12, 97, 76, 98, 9, 99, 91, 43, 74, 3, 55, 15, 37, 75, 83, 10, 67, 95, 3, 7, 95, 77, 47, 86, 38, 44, 45, 10, 64, 24, 5, 90]).
f([94, 46, 63, 25, 41, 50, 66, 26, 22, 97, 89, 89, 11, 79, 89, 14, 90, 21, 14, 6, 64, 13, 43, 9, 85, 27, 45, 75, 53, 61, 66, 39, 54, 52, 21, 101, 88, 40, 41, 74, 50, 33, 78, 100, 86, 99],[94, 46, 63, 25, 41, 50, 66, 26, 22, 97, 89, 89, 11, 79, 89, 14, 90, 21, 14, 6, 64, 13, 43, 9, 85, 27, 45, 75, 53, 61, 66, 39, 54, 52, 21, 101, 88, 40, 41, 74, 50, 33, 78, 100, 86]).
f([100, 56, 35, 32, 37, 16, 31, 94, 36, 14, 12, 65, 7, 14, 89, 51, 94, 68, 22, 59],[100, 56, 35, 32, 37, 16, 31, 94, 36, 14, 12, 65, 7, 14, 89, 51, 94, 68, 22]).
f([88, 60, 21, 5, 31, 80, 2, 5, 51, 68, 61, 28, 56, 58, 40, 47, 2, 41, 80, 93, 1, 99, 10, 41, 92, 8, 63, 101, 89, 8, 68, 40, 48, 54, 56, 9, 11, 16],[88, 60, 21, 5, 31, 80, 2, 5, 51, 68, 61, 28, 56, 58, 40, 47, 2, 41, 80, 93, 1, 99, 10, 41, 92, 8, 63, 101, 89, 8, 68, 40, 48, 54, 56, 9, 11]).
f([60, 50, 85, 65, 32, 99, 21, 19, 37, 3, 64],[60, 50, 85, 65, 32, 99, 21, 19, 37, 3]).
f([34, 74, 12, 35, 28, 22, 9, 57, 66, 26, 11, 87, 76, 87, 87, 10, 101, 83],[34, 74, 12, 35, 28, 22, 9, 57, 66, 26, 11, 87, 76, 87, 87, 10, 101]).
f([56, 6, 30, 65, 37, 46, 40, 97, 99, 27],[56, 6, 30, 65, 37, 46, 40, 97, 99]).
:-end_in_pos.
:-begin_in_neg.
f([87, 54, 23, 43, 32, 60, 41, 49, 6, 90, 16, 92, 29, 97, 23, 70, 46, 56, 90, 4, 15, 42, 11, 18, 74, 86, 32, 39, 66, 23, 29, 22, 86],[87, 54, 23, 43, 32, 60, 41, 49, 6, 90, 16, 92, 29, 97, 23, 70, 46, 56, 90, 4, 15, 42, 11, 18, 74, 86, 32, 39, 66, 23, 29, 22, 86]).
f([9, 83, 8, 54, 8, 37, 29, 49, 24, 74, 100, 25, 96, 22, 71, 19, 4, 48, 16, 54, 23, 23, 59, 89, 93, 58, 71, 29, 91, 40, 99, 52, 44, 99, 82, 64, 21, 16, 29, 41, 101, 62, 34, 53, 10],[9, 83, 8, 54, 8, 37, 29, 49, 24, 74, 100, 25, 96, 22, 71, 19, 4, 48, 16, 54, 23, 23, 59, 89, 93, 58, 71, 29, 91, 40, 99, 52, 44, 99, 82, 64, 21, 16, 29, 41, 101, 62, 34, 53, 10]).
f([14, 55, 84, 98, 78, 17, 62, 94, 25, 1, 49, 41, 49, 24, 21, 12, 43, 73, 6, 11, 100, 94, 34, 83, 1, 51],[14, 55, 84, 98, 78, 17, 62, 94, 25, 1, 49, 41, 49, 24, 21, 12, 43, 73, 6, 11, 100, 94, 34, 83, 1, 51]).
f([46, 68, 62, 68, 67, 2, 12, 34, 46, 54, 86, 5, 100, 41, 78, 75, 65, 74, 59, 98, 90, 8, 89, 91, 80, 25, 9, 12, 76, 96, 60, 12, 99, 43, 33, 55, 73, 2, 58, 95],[46, 68, 62, 68, 67, 2, 12, 34, 46, 54, 86, 5, 100, 41, 78, 75, 65, 74, 59, 98, 90, 8, 89, 91, 80, 25, 9, 12, 76, 96, 60, 12, 99, 43, 33, 55, 73, 2, 58, 95]).
f([59, 76, 25, 49, 59, 72, 57, 94, 100, 79, 70],[59, 76, 25, 49, 59, 72, 57, 94, 100, 79, 70]).
f([43, 67, 33, 86, 81],[43, 67, 33, 86, 81]).
f([25, 8, 25],[25, 8, 25]).
f([62, 54, 70, 60, 3, 87, 78, 63, 20, 90, 62, 83, 42, 36, 59, 17, 13, 57, 11, 21, 63, 85, 3, 47, 59, 50, 84, 78, 43, 34, 95, 80, 9, 38, 62, 90, 72, 54, 21, 80, 79, 9, 68, 83, 91, 57, 61],[62, 54, 70, 60, 3, 87, 78, 63, 20, 90, 62, 83, 42, 36, 59, 17, 13, 57, 11, 21, 63, 85, 3, 47, 59, 50, 84, 78, 43, 34, 95, 80, 9, 38, 62, 90, 72, 54, 21, 80, 79, 9, 68, 83, 91, 57, 61]).
f([90, 41, 26, 95, 43, 32, 35, 18, 68, 66, 45, 89, 22, 45, 83, 43, 100, 34, 7, 27, 70, 39, 98, 31, 90, 16],[90, 41, 26, 95, 43, 32, 35, 18, 68, 66, 45, 89, 22, 45, 83, 43, 100, 34, 7, 27, 70, 39, 98, 31, 90, 16]).
f([81, 96],[81, 96]).
:-end_in_neg.
